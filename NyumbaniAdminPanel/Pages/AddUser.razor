@page "/users/add"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject NavigationManager NavigationManager

<div class="page-container">
    <div class="page-header">
        <h1>Add New User</h1>
    </div>
    
    <div class="form-container">
        <EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            
            <div class="form-section">
                <h2>Personal Information</h2>
                <div class="form-row">
                    <div class="form-group">
                        <label for="firstName">First Name *</label>
                        <InputText id="firstName" @bind-Value="newUser.FirstName" class="form-control" />
                        <ValidationMessage For="@(() => newUser.FirstName)" />
                    </div>
                    
                    <div class="form-group">
                        <label for="lastName">Last Name *</label>
                        <InputText id="lastName" @bind-Value="newUser.LastName" class="form-control" />
                        <ValidationMessage For="@(() => newUser.LastName)" />
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="email">Email Address *</label>
                        <InputText id="email" @bind-Value="newUser.Email" class="form-control" />
                        <ValidationMessage For="@(() => newUser.Email)" />
                    </div>
                    
                    <div class="form-group">
                        <label for="phone">Phone Number *</label>
                        <InputText id="phone" @bind-Value="newUser.Phone" class="form-control" />
                        <ValidationMessage For="@(() => newUser.Phone)" />
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="idNumber">ID Number *</label>
                        <InputText id="idNumber" @bind-Value="newUser.IdNumber" class="form-control" />
                        <ValidationMessage For="@(() => newUser.IdNumber)" />
                    </div>
                    
                    <div class="form-group">
                        <label for="dateOfBirth">Date of Birth *</label>
                        <InputDate id="dateOfBirth" @bind-Value="newUser.DateOfBirth" class="form-control" />
                        <ValidationMessage For="@(() => newUser.DateOfBirth)" />
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="role">Role *</label>
                        <InputSelect id="role" @bind-Value="newUser.Role" class="form-control">
                            <option value="">-- Select Role --</option>
                            <option value="admin">Administrator</option>
                            <option value="agent">Agent</option>
                            <option value="owner">Property Owner</option>
                            <option value="tenant">Tenant</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newUser.Role)" />
                    </div>
                    
                    <div class="form-group">
                        <label for="status">Account Status *</label>
                        <InputSelect id="status" @bind-Value="newUser.Status" class="form-control">
                            <option value="active">Active</option>
                            <option value="inactive">Inactive</option>
                            <option value="suspended">Suspended</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => newUser.Status)" />
                    </div>
                </div>
            </div>
            
            <div class="form-section">
                <h2>Address Information</h2>
                <div class="form-group full-width">
                    <label for="address">Address *</label>
                    <InputTextArea id="address" @bind-Value="newUser.Address" class="form-control" rows="2" />
                    <ValidationMessage For="@(() => newUser.Address)" />
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="city">City *</label>
                        <InputText id="city" @bind-Value="newUser.City" class="form-control" />
                        <ValidationMessage For="@(() => newUser.City)" />
                    </div>
                    
                    <div class="form-group">
                        <label for="county">County *</label>
                        <InputText id="county" @bind-Value="newUser.County" class="form-control" />
                        <ValidationMessage For="@(() => newUser.County)" />
                    </div>
                </div>
            </div>
            
            <div class="form-section">
                <h2>Security</h2>
                <div class="form-row">
                    <div class="form-group">
                        <label for="password">Password *</label>
                        <InputText type="password" id="password" @bind-Value="newUser.Password" class="form-control" />
                        <ValidationMessage For="@(() => newUser.Password)" />
                    </div>
                    
                    <div class="form-group">
                        <label for="confirmPassword">Confirm Password *</label>
                        <InputText type="password" id="confirmPassword" @bind-Value="newUser.ConfirmPassword" class="form-control" />
                        <ValidationMessage For="@(() => newUser.ConfirmPassword)" />
                    </div>
                </div>
            </div>
            
            <div class="form-section">
                <h2>Profile Image</h2>
                <div class="form-group">
                    <label for="profileImage">Profile Image</label>
                    <InputFile id="profileImage" OnChange="HandleFileSelection" class="form-control" accept=".jpg,.jpeg,.png" />
                    <small class="form-text text-muted">Upload a profile image (JPG or PNG, max 2MB)</small>
                    
                    @if (!string.IsNullOrEmpty(imagePreviewUrl))
                    {
                        <div class="image-preview">
                            <img src="@imagePreviewUrl" alt="Profile Preview" />
                        </div>
                    }
                </div>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn-secondary" @onclick="Cancel">Cancel</button>
                <button type="submit" class="btn-primary">Create User</button>
            </div>
        </EditForm>
    </div>
    
    @if (showSuccessMessage)
    {
        <div class="success-message">
            <div class="success-content">
                <i class="fas fa-check-circle"></i>
                <h3>User Created Successfully!</h3>
                <p>The new user account has been created and is now active in the system.</p>
                <div class="success-actions">
                    <button class="btn-primary" @onclick="CreateAnotherUser">Add Another User</button>
                    <button class="btn-secondary" @onclick="ViewUsersList">View All Users</button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .page-container {
        padding: 20px;
        font-family: 'Segoe UI', Arial, sans-serif;
        max-width: 900px;
        margin: 0 auto;
        position: relative;
    }
    
    .page-header {
        margin-bottom: 25px;
    }
    
    h1 {
        color: #333;
        margin: 0;
    }
    
    .form-container {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }
    
    .form-section {
        margin-bottom: 30px;
        border-bottom: 1px solid #eee;
        padding-bottom: 20px;
    }
    
    .form-section:last-child {
        border-bottom: none;
    }
    
    .form-section h2 {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 20px;
        color: #333;
    }
    
    .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 15px;
    }
    
    .form-group {
        flex: 1;
        margin-bottom: 15px;
    }
    
    .form-group.full-width {
        width: 100%;
    }
    
    label {
        display: block;
        font-size: 14px;
        color: #555;
        margin-bottom: 5px;
    }
    
    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
    }
    
    .form-control:focus {
        outline: none;
        border-color: #0b4b10;
        box-shadow: 0 0 0 2px rgba(0, 120, 212, 0.2);
    }
    
    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }
    
    .btn-primary {
        background-color: #0b4b10;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }
    
    .btn-primary:hover {
        background-color: #0b4b10;
    }
    
    .btn-secondary {
        background-color: #f5f5f5;
        color: #333;
        border: 1px solid #ddd;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
    }
    
    .btn-secondary:hover {
        background-color: #e5e5e5;
    }
    
    .validation-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
    }
    
    .form-text {
        font-size: 12px;
        color: #666;
    }
    
    .image-preview {
        margin-top: 10px;
        width: 100px;
        height: 100px;
        border-radius: 50%;
        overflow: hidden;
        border: 1px solid #ddd;
    }
    
    .image-preview img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    
    .success-message {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }
    
    .success-content {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
        padding: 30px;
        text-align: center;
        max-width: 500px;
    }
    
    .success-content i {
        font-size: 60px;
        color: #4caf50;
        margin-bottom: 20px;
    }
    
    .success-content h3 {
        font-size: 24px;
        margin-bottom: 10px;
        color: #333;
    }
    
    .success-content p {
        color: #666;
        margin-bottom: 20px;
    }
    
    .success-actions {
        display: flex;
        justify-content: center;
        gap: 15px;
    }
    
    @@media (max-width: 768px) {
        .form-row {
            flex-direction: column;
            gap: 0;
        }
    }
</style>

@code {
    private UserRegistrationModel newUser = new UserRegistrationModel();
    private string imagePreviewUrl = "";
    private bool showSuccessMessage = false;
    
    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        // In a real application, you would handle file uploads to a server
        // For this example, we'll just create a data URL for preview
        try
        {
            var file = e.File;
            if (file != null)
            {
                // Check file size (max 2MB)
                if (file.Size > 2 * 1024 * 1024)
                {
                    // File too large
                    return;
                }
                
                var buffer = new byte[file.Size];
                await file.OpenReadStream(2 * 1024 * 1024).ReadAsync(buffer);
                var imageType = file.ContentType;
                var base64Image = Convert.ToBase64String(buffer);
                imagePreviewUrl = $"data:{imageType};base64,{base64Image}";
                
                // Set the filename in the model
                newUser.ProfileImage = file.Name;
            }
        }
        catch (Exception)
        {
            // Handle exception
        }
    }
    
    private void HandleValidSubmit()
    {
        // In a real application, you would save the user to the database
        // For this example, we'll just show the success message
        showSuccessMessage = true;
    }
    
    private void Cancel()
    {
        NavigationManager.NavigateTo("/users");
    }
    
    private void CreateAnotherUser()
    {
        // Reset the form and hide the success message
        newUser = new UserRegistrationModel();
        imagePreviewUrl = "";
        showSuccessMessage = false;
    }
    
    private void ViewUsersList()
    {
        NavigationManager.NavigateTo("/users");
    }
    
    public class UserRegistrationModel
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
        public string FirstName { get; set; } = "";
        
        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
        public string LastName { get; set; } = "";
        
        [Required(ErrorMessage = "Email address is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        [StringLength(100, ErrorMessage = "Email cannot exceed 100 characters")]
        public string Email { get; set; } = "";
        
        [Required(ErrorMessage = "Phone number is required")]
        [RegularExpression(@"^0\d{9}$", ErrorMessage = "Phone number must be 10 digits starting with 0")]
        [StringLength(15, ErrorMessage = "Phone number cannot exceed 15 characters")]
        public string Phone { get; set; } = "";
        
        [Required(ErrorMessage = "ID number is required")]
        [StringLength(20, ErrorMessage = "ID number cannot exceed 20 characters")]
        public string IdNumber { get; set; } = "";
        
        [Required(ErrorMessage = "Date of birth is required")]
        public DateTime DateOfBirth { get; set; } = DateTime.Today.AddYears(-18);
        
        [Required(ErrorMessage = "Role is required")]
        public string Role { get; set; } = "";
        
        [Required(ErrorMessage = "Address is required")]
        public string Address { get; set; } = "";
        
        [Required(ErrorMessage = "City is required")]
        [StringLength(50, ErrorMessage = "City cannot exceed 50 characters")]
        public string City { get; set; } = "";
        
        [Required(ErrorMessage = "County is required")]
        [StringLength(50, ErrorMessage = "County cannot exceed 50 characters")]
        public string County { get; set; } = "";
        
        public string ProfileImage { get; set; } = "";
        
        [Required(ErrorMessage = "Status is required")]
        public string Status { get; set; } = "active";
        
        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", 
            ErrorMessage = "Password must include at least one uppercase letter, one lowercase letter, one number, and one special character")]
        public string Password { get; set; } = "";
        
        [Required(ErrorMessage = "Please confirm your password")]
        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }
}