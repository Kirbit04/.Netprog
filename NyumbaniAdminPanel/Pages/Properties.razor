@page "/properties"
@using System.Collections.Generic
@inject NavigationManager NavigationManager

<div class="container">
    <h1>Property Management</h1>
    
    <div class="action-bar">
        <button class="btn-primary" @onclick="AddNewProperty">
            <i class="fas fa-plus"></i> Add New Property
        </button>
    </div>
    
    <div class="card">
        <div class="card-header">
            <h2>Properties List</h2>
        </div>
        <div class="card-body">
            <table class="properties-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Status</th>
                        <th>Monthly Rent</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var property in properties)
                    {
                        <tr>
                            <td>@property.Name</td>
                            <td>@property.Type</td>
                            <td>
                                <span class="status @(property.IsOccupied ? "occupied" : "vacant")">
                                    @(property.IsOccupied ? "Occupied" : "Vacant")
                                </span>
                            </td>
                            <td>$@property.MonthlyRent.ToString("N0")</td>
                            <td>
                                <button class="btn-icon" @onclick="() => ViewProperty(property.Id)">
                                    <i class="fas fa-eye"></i>
                                </button>
                                <button class="btn-icon" @onclick="() => EditProperty(property.Id)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn-icon delete" @onclick="() => DeleteProperty(property.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<style>
    .container {
        padding: 20px;
        font-family: 'Segoe UI', Arial, sans-serif;
    }
    
    h1 {
        color: #333;
        margin-bottom: 20px;
    }
    
    .action-bar {
        margin-bottom: 20px;
    }
    
    .card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }
    
    .card-header {
        padding: 15px 20px;
        border-bottom: 1px solid #eee;
    }
    
    .card-header h2 {
        margin: 0;
        font-size: 18px;
        color: #333;
    }
    
    .card-body {
        padding: 20px;
        overflow-x: auto;
    }
    
    .properties-table {
        width: 100%;
        border-collapse: collapse;
    }
    
    .properties-table th {
        text-align: left;
        padding: 10px;
        border-bottom: 2px solid #ddd;
        font-weight: 600;
    }
    
    .properties-table td {
        padding: 10px;
        border-bottom: 1px solid #eee;
    }
    
    .status {
        display: inline-block;
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 12px;
        font-weight: 500;
    }
    
    .status.occupied {
        background: #e6f7e6;
        color: #28a745;
    }
    
    .status.vacant {
        background: #fff5e6;
        color: #fd7e14;
    }
    
    .btn-primary {
        background-color: #0b4b10;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 4px;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
    }
    
    .btn-primary i {
        margin-right: 8px;
    }
    
    .btn-primary:hover {
        background-color: #0069b8;
    }
    
    .btn-icon {
        width: 30px;
        height: 30px;
        border-radius: 4px;
        background: #f5f5f5;
        border: 1px solid #ddd;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin-right: 5px;
        cursor: pointer;
        color: #666;
    }
    
    .btn-icon:hover {
        background: #e9e9e9;
    }
    
    .btn-icon.delete:hover {
        background: #ffebee;
        color: #f44336;
        border-color: #f44336;
    }
</style>

@code {
    private List<Property> properties = new List<Property>();
    
    protected override void OnInitialized()
    {
        // Initialize with sample data
        properties = new List<Property>
        {
            new Property { Id = 1, Name = "Sunset Apartments #101", Type = "Apartment", IsOccupied = true, MonthlyRent = 1500 },
            new Property { Id = 2, Name = "Sunset Apartments #102", Type = "Apartment", IsOccupied = true, MonthlyRent = 1450 },
            new Property { Id = 3, Name = "Sunset Apartments #103", Type = "Apartment", IsOccupied = false, MonthlyRent = 1500 },
            new Property { Id = 4, Name = "Lakeside Villa", Type = "House", IsOccupied = true, MonthlyRent = 2800 },
            new Property { Id = 5, Name = "Downtown Loft #3A", Type = "Loft", IsOccupied = true, MonthlyRent = 2200 },
            new Property { Id = 6, Name = "Mountain View Condo", Type = "Condo", IsOccupied = true, MonthlyRent = 1950 },
            new Property { Id = 7, Name = "Riverside Cottage", Type = "House", IsOccupied = false, MonthlyRent = 2100 }
        };
    }
    
    private void AddNewProperty()
    {
        NavigationManager.NavigateTo("/properties/add");
    }
    
    private void ViewProperty(int id)
    {
        NavigationManager.NavigateTo($"/properties/{id}");
    }
    
    private void EditProperty(int id)
    {
        NavigationManager.NavigateTo($"/properties/{id}/edit");
    }
    
    private void DeleteProperty(int id)
    {
        // In a real application, you would show a confirmation dialog
        // and then call an API to delete the property
        properties.RemoveAll(p => p.Id == id);
    }
    
    public class Property
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Type { get; set; } = "";
        public bool IsOccupied { get; set; }
        public decimal MonthlyRent { get; set; }
    }
}